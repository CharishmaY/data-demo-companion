allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    group = 'org.msse.demo'
    version = '0.1.0'

    java {
      sourceCompatibility = JavaVersion.VERSION_17
      targetCompatibility = JavaVersion.VERSION_17
    }

    repositories {
     //   mavenLocal()
        mavenCentral()
        maven {
            url "https://packages.confluent.io/maven/"
        }
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }

    jar {
        manifest.attributes provider: 'gradle'
    }


    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

apply plugin: 'docker-compose'

// projectName for each project should match .env/COMPOSE_PROJECT_NAME
// this allows for cli and gradle tasks to co-exist.

dockerCompose {
    pinot {
        projectName = 'data-demo-pinot'
        composeAdditionalArgs = [ '--env-file', './pinot/local/.env' ]
        useComposeFiles = ['./pinot/local/docker-compose.yml']
    }
}

// if the run.sh script contains "./.classpath.sh" then the run is using the gradle application, and it can be run
// by untarring the distribution, or to make life faster that is replicated by creating a classpath for the
// application from the runtimeClasspath, as defined within gradle; so true reponse indicates to do that
// as
def needsClasspathSh(File file) {

    def isFound = false

    def reader = new BufferedReader(new FileReader(file))

    // Iterate through each line in the file
    reader.eachLine { line ->
        if (line.contains("./.classpath.sh")) {
            isFound = true
            return
        }
    }

    reader.close()

    isFound
}

configure(subprojects.findAll { project -> file("${project.name}/run.sh").exists() && needsClasspathSh(file("${project.name}/run.sh"))}) {

    // creates a shell file that can set the java class-path for integration tests.
    ext.createIntegrationClasspath = { scriptName ->
        def cp = sourceSets.main.runtimeClasspath.collect { "export CP=\"\${CP}:${it}\"" }.join("\n")
        def file = new File(projectDir, scriptName)
        file.text = 'export CP=""\n' + cp + '\n'
        file.setExecutable(true)
    }

    task postBuildScript() {
        doLast {
            createIntegrationClasspath('./.classpath.sh')
        }
    }
    build.finalizedBy postBuildScript

}